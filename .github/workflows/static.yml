# Enhanced workflow for building Go app and deploying to GitHub Pages
name: 🚀 Build and Deploy to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths:
      - 'main.go'
      - 'index.html'
      - 'src/**'
      - '.github/workflows/static.yml'

  # Runs every 10 minutes to update cybersecurity writeups
  schedule:
    - cron: '*/10 * * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild of content'
        required: false
        default: 'false'
        type: boolean

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  GO_VERSION: '1.23.4'

jobs:
  # Build Go application and generate content
  build:
    name: 🏗️ Build Content
    runs-on: ubuntu-latest
    outputs:
      content_updated: ${{ steps.check_content.outputs.updated }}
    
    steps:
      - name: 📋 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: 📦 Initialize Go module if needed
        run: |
          if [ ! -f "go.mod" ]; then
            echo "📦 Creating go.mod..."
            go mod init medium-writeups-aggregator
          fi
          go mod tidy
          echo "✅ Go module ready"
      
      - name: 💾 Backup current content
        run: |
          # Create data directory if it doesn't exist
          mkdir -p data
          
          # Backup existing generated files (but NOT index.html - we want to keep that!)
          if [ -f "README.md" ]; then
            cp README.md README.md.backup
          fi
          if [ -f "data/posts.json" ]; then
            cp data/posts.json data/posts.json.backup
          fi
          if [ -f "data/summary.json" ]; then
            cp data/summary.json data/summary.json.backup
          fi
          
          echo "✅ Backup completed (preserving enhanced index.html)"
      
      - name: 🚀 Generate content with Go aggregator
        id: generate
        run: |
          echo "🚀 Running Go aggregator to generate fresh content..."
          
          # Set environment variables for better performance
          export RATE_LIMIT_DELAY=3
          export DEBUG_MODE=false
          
          # Run the aggregator with timeout
          if timeout 1800 go run main.go; then
            echo "✅ Content generation completed successfully"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Content generation failed"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: 🔍 Check if content was updated
        id: check_content
        run: |
          CONTENT_UPDATED=false
          
          # Check if JSON data was created/updated
          if [ -f "data/posts.json" ]; then
            if [ ! -f "data/posts.json.backup" ] || ! cmp -s "data/posts.json" "data/posts.json.backup"; then
              echo "✅ posts.json updated"
              CONTENT_UPDATED=true
            fi
          fi
          
          # Check if summary JSON was created/updated
          if [ -f "data/summary.json" ]; then
            if [ ! -f "data/summary.json.backup" ] || ! cmp -s "data/summary.json" "data/summary.json.backup"; then
              echo "✅ summary.json updated"  
              CONTENT_UPDATED=true
            fi
          fi
          
          # Check if README was updated
          if [ -f "README.md" ]; then
            if [ ! -f "README.md.backup" ] || ! cmp -s "README.md" "README.md.backup"; then
              echo "✅ README.md updated"
              CONTENT_UPDATED=true
            fi
          fi
          
          # Force update if requested
          if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "🔄 Force rebuild requested"
            CONTENT_UPDATED=true
          fi
          
          echo "updated=$CONTENT_UPDATED" >> $GITHUB_OUTPUT
          echo "📊 Content updated: $CONTENT_UPDATED"
      
      - name: 📝 Commit updated content
        if: steps.check_content.outputs.updated == 'true'
        run: |
          echo "📝 Committing updated content..."
          
          # Configure Git
          git config --global user.name 'GitHub Pages Bot'
          git config --global user.email 'actions+pages@users.noreply.github.com'
          
          # Add all generated files
          git add README.md index.html data/ src/ || true
          
          # Check if there are changes to commit
          if ! git diff --cached --exit-code > /dev/null; then
            # Create commit message with stats
            UTC_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
            
            # Extract stats from generated content
            TOTAL_POSTS=$(grep -o '"totalPosts":[0-9]*' data/summary.json 2>/dev/null | grep -o '[0-9]*' || echo "0")
            NEW_POSTS=$(grep -o '"newPosts":[0-9]*' data/summary.json 2>/dev/null | grep -o '[0-9]*' || echo "0")
            
            COMMIT_MSG="🚀 Auto-update cybersecurity dashboard - $UTC_DATE

📊 Content Statistics:
• Total Posts: $TOTAL_POSTS
• New Posts: $NEW_POSTS
• Generated: index.html, README.md, JSON data

🤖 Auto-generated by GitHub Actions
🔗 Ready for GitHub Pages deployment
📅 $UTC_DATE"
            
            git commit -m "$COMMIT_MSG"
            git push origin main
            echo "✅ Content committed and pushed"
          else
            echo "ℹ️ No changes to commit"
          fi
      
      - name: 🧹 Cleanup backup files
        if: always()
        run: |
          rm -f *.backup data/*.backup
          echo "✅ Cleanup completed"

  # Deploy to GitHub Pages
  deploy:
    name: 🌐 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.content_updated == 'true' || github.event.inputs.force_rebuild == 'true'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: 📋 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
      
      - name: 🔧 Setup Pages
        uses: actions/configure-pages@v5
      
      - name: 🔍 Validate required files
        run: |
          echo "🔍 Checking for required files..."
          
          if [ ! -f "index.html" ]; then
            echo "❌ index.html not found!"
            exit 1
          fi
          
          if [ ! -f "data/posts.json" ]; then
            echo "⚠️ data/posts.json not found - creating empty data"
            mkdir -p data
            echo "[]" > data/posts.json
          fi
          
          if [ ! -f "data/summary.json" ]; then
            echo "⚠️ data/summary.json not found - creating empty summary"
            echo "{\"totalPosts\":0,\"newPosts\":0}" > data/summary.json
          fi
          
          echo "✅ All required files present"
      
      - name: 📦 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload web-ready content only
          path: '.'
      
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: 📊 Deployment summary
        run: |
          echo "# 🚀 GitHub Pages Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Site URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Deployed**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📄 Available Pages" >> $GITHUB_STEP_SUMMARY
          echo "- 🏠 [Main Dashboard](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 [Data API](${{ steps.deployment.outputs.page_url }}data/posts.json)" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 [Summary API](${{ steps.deployment.outputs.page_url }}data/summary.json)" >> $GITHUB_STEP_SUMMARY
